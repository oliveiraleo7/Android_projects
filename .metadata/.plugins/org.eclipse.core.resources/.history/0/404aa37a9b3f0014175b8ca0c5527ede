package com.project.curiosos;

import java.io.IOException;
import java.util.List;

import org.apache.commons.httpclient.DefaultHttpMethodRetryHandler;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpException;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpMethodParams;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import android.os.AsyncTask;

public class BaixaJson extends AsyncTask<String, Void, List<Curiosidade>> {

	@Override
	protected List<Curiosidade> doInBackground(String... arg0) {
		
		String url = params[0];
		this.BaixarConteudo(url)
		
		return null;
	}
	
	private String BaixarConteudo(String url){
			
		String json = "";
		
		// Create an instance of HttpClient.
		HttpClient client = new HttpClient();
			
		// Create a method instance.
	    GetMethod method = new GetMethod(url);
	    
	    // Provide custom retry handler is necessary
	    method.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, 
	    		new DefaultHttpMethodRetryHandler(3, false));

	    try {
	      // Execute the method.
	      int statusCode = client.executeMethod(method);

	      if (statusCode != HttpStatus.SC_OK) {
	        System.err.println("Method failed: " + method.getStatusLine());
	      }

	      // Read the response body.
	      byte[] responseBody = method.getResponseBody();

	      // Deal with the response.
	      // Use caution: ensure correct character encoding and is not binary data
	      json = responseBody.toString();

	    } catch (HttpException e) {
	      System.err.println("Fatal protocol violation: " + e.getMessage());
	      e.printStackTrace();
	    } catch (IOException e) {
	      System.err.println("Fatal transport error: " + e.getMessage());
	      e.printStackTrace();
	    } catch (Exception e) {
	    	System.err.println("Fatal transport error: " + e.getMessage());
		      e.printStackTrace();
	    } finally {
	      // Release the connection.
	      method.releaseConnection();
	    }  
	    
	    return json;
	}
	
	private List<Curiosidade> ConverterJson(String json) {
		
		Gson gson = new Gson();
		List<Curiosidade> curiosidades = gson.fromJson(json, new TypeToken<List<Curiosidade>>(){}.getType());
		return curiosidades;
	}

}
